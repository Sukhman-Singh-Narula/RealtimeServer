# Docker Compose file for ESP32 Language Learning System

services:
  # Redis service for caching and session management
  redis:
    image: redis:7-alpine
    container_name: esp32_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - esp32_network

  # Main FastAPI application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: esp32_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      
      # Database configuration
      - DATABASE_URL=sqlite+aiosqlite:///./data/database.db
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      
      # Firebase configuration
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
      
      # OpenAI configuration (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_REALTIME_MODEL=gpt-4o-realtime-preview-2024-12-17
      
      # Logging
      - LOG_LEVEL=INFO
    volumes:
      # Persistent data storage
      - app_data:/app/data
      - app_logs:/app/logs
      # Firebase credentials (you need to add this file)
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - esp32_network

  # Optional: Database backup service
  backup:
    image: alpine:latest
    container_name: esp32_backup
    restart: unless-stopped
    volumes:
      - app_data:/data:ro
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          echo 'Creating backup...'
          tar -czf /backups/database-backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /data .
          # Keep only last 7 days of backups
          find /backups -name '*.tar.gz' -mtime +7 -delete
          echo 'Backup completed. Sleeping for 6 hours...'
          sleep 21600
        done
      "
    depends_on:
      - app
    networks:
      - esp32_network

  # Optional: Monitoring with simple HTTP monitor
  monitor:
    image: alpine:latest
    container_name: esp32_monitor
    restart: unless-stopped
    volumes:
      - ./monitoring:/monitoring
    command: >
      sh -c "
        apk add --no-cache curl jq
        while true; do
          echo '$$(date): Checking app health...'
          if curl -f http://app:8000/status > /monitoring/status.json 2>/dev/null; then
            echo '$$(date): App is healthy'
          else
            echo '$$(date): App health check failed!'
          fi
          sleep 60
        done
      "
    depends_on:
      - app
    networks:
      - esp32_network

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local

# Network for inter-service communication
networks:
  esp32_network:
    driver: bridge